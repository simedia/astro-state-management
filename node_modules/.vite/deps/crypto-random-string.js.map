{
  "version": 3,
  "sources": ["../../crypto-random-string/core.js", "../../crypto-random-string/browser.js"],
  "sourcesContent": ["const urlSafeCharacters = [...'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._~'];\nconst numericCharacters = [...'0123456789'];\nconst distinguishableCharacters = [...'CDEHKMPRTUWXY012458'];\nconst asciiPrintableCharacters = [...'!\"#$%&\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~'];\nconst alphanumericCharacters = [...'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'];\n\nconst readUInt16LE = (uInt8Array, offset) => uInt8Array[offset] + (uInt8Array[offset + 1] << 8); // eslint-disable-line no-bitwise\n\nconst generateForCustomCharacters = (length, characters, randomBytes) => {\n\t// Generating entropy is faster than complex math operations, so we use the simplest way\n\tconst characterCount = characters.length;\n\tconst maxValidSelector = (Math.floor(0x1_00_00 / characterCount) * characterCount) - 1; // Using values above this will ruin distribution when using modular division\n\tconst entropyLength = 2 * Math.ceil(1.1 * length); // Generating a bit more than required so chances we need more than one pass will be really low\n\tlet string = '';\n\tlet stringLength = 0;\n\n\twhile (stringLength < length) { // In case we had many bad values, which may happen for character sets of size above 0x8000 but close to it\n\t\tconst entropy = randomBytes(entropyLength);\n\t\tlet entropyPosition = 0;\n\n\t\twhile (entropyPosition < entropyLength && stringLength < length) {\n\t\t\tconst entropyValue = readUInt16LE(entropy, entropyPosition);\n\t\t\tentropyPosition += 2;\n\t\t\tif (entropyValue > maxValidSelector) { // Skip values which will ruin distribution when using modular division\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tstring += characters[entropyValue % characterCount];\n\t\t\tstringLength++;\n\t\t}\n\t}\n\n\treturn string;\n};\n\nconst generateForCustomCharactersAsync = async (length, characters, randomBytesAsync) => {\n\t// Generating entropy is faster than complex math operations, so we use the simplest way\n\tconst characterCount = characters.length;\n\tconst maxValidSelector = (Math.floor(0x1_00_00 / characterCount) * characterCount) - 1; // Using values above this will ruin distribution when using modular division\n\tconst entropyLength = 2 * Math.ceil(1.1 * length); // Generating a bit more than required so chances we need more than one pass will be really low\n\tlet string = '';\n\tlet stringLength = 0;\n\n\twhile (stringLength < length) { // In case we had many bad values, which may happen for character sets of size above 0x8000 but close to it\n\t\tconst entropy = await randomBytesAsync(entropyLength); // eslint-disable-line no-await-in-loop\n\t\tlet entropyPosition = 0;\n\n\t\twhile (entropyPosition < entropyLength && stringLength < length) {\n\t\t\tconst entropyValue = readUInt16LE(entropy, entropyPosition);\n\t\t\tentropyPosition += 2;\n\t\t\tif (entropyValue > maxValidSelector) { // Skip values which will ruin distribution when using modular division\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tstring += characters[entropyValue % characterCount];\n\t\t\tstringLength++;\n\t\t}\n\t}\n\n\treturn string;\n};\n\nconst allowedTypes = new Set([\n\tundefined,\n\t'hex',\n\t'base64',\n\t'url-safe',\n\t'numeric',\n\t'distinguishable',\n\t'ascii-printable',\n\t'alphanumeric',\n]);\n\nconst createGenerator = (generateForCustomCharacters, specialRandomBytes, randomBytes) => ({length, type, characters}) => {\n\tif (!(length >= 0 && Number.isFinite(length))) {\n\t\tthrow new TypeError('Expected a `length` to be a non-negative finite number');\n\t}\n\n\tif (type !== undefined && characters !== undefined) {\n\t\tthrow new TypeError('Expected either `type` or `characters`');\n\t}\n\n\tif (characters !== undefined && typeof characters !== 'string') {\n\t\tthrow new TypeError('Expected `characters` to be string');\n\t}\n\n\tif (!allowedTypes.has(type)) {\n\t\tthrow new TypeError(`Unknown type: ${type}`);\n\t}\n\n\tif (type === undefined && characters === undefined) {\n\t\ttype = 'hex';\n\t}\n\n\tif (type === 'hex' || (type === undefined && characters === undefined)) {\n\t\treturn specialRandomBytes(Math.ceil(length * 0.5), 'hex', length); // Needs 0.5 bytes of entropy per character\n\t}\n\n\tif (type === 'base64') {\n\t\treturn specialRandomBytes(Math.ceil(length * 0.75), 'base64', length); // Needs 0.75 bytes of entropy per character\n\t}\n\n\tif (type === 'url-safe') {\n\t\treturn generateForCustomCharacters(length, urlSafeCharacters, randomBytes);\n\t}\n\n\tif (type === 'numeric') {\n\t\treturn generateForCustomCharacters(length, numericCharacters, randomBytes);\n\t}\n\n\tif (type === 'distinguishable') {\n\t\treturn generateForCustomCharacters(length, distinguishableCharacters, randomBytes);\n\t}\n\n\tif (type === 'ascii-printable') {\n\t\treturn generateForCustomCharacters(length, asciiPrintableCharacters, randomBytes);\n\t}\n\n\tif (type === 'alphanumeric') {\n\t\treturn generateForCustomCharacters(length, alphanumericCharacters, randomBytes);\n\t}\n\n\tif (characters.length === 0) {\n\t\tthrow new TypeError('Expected `characters` string length to be greater than or equal to 1');\n\t}\n\n\tif (characters.length > 0x1_00_00) {\n\t\tthrow new TypeError('Expected `characters` string length to be less or equal to 65536');\n\t}\n\n\treturn generateForCustomCharacters(length, characters, randomBytes);\n};\n\nexport function createStringGenerator(specialRandomBytes, randomBytes) {\n\treturn createGenerator(generateForCustomCharacters, specialRandomBytes, randomBytes);\n}\n\nexport function createAsyncStringGenerator(specialRandomBytesAsync, randomBytesAsync) {\n\treturn createGenerator(generateForCustomCharactersAsync, specialRandomBytesAsync, randomBytesAsync);\n}\n", "/* eslint-env browser */\nimport {createStringGenerator, createAsyncStringGenerator} from './core.js';\n\nconst toHex = uInt8Array => [...uInt8Array].map(byte => byte.toString(16).padStart(2, '0')).join('');\nconst toBase64 = uInt8Array => btoa(String.fromCodePoint(...uInt8Array));\n\n// `crypto.getRandomValues` throws an error if too much entropy is requested at once. (https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues#exceptions)\nconst maxEntropy = 65_536;\n\nfunction getRandomValues(byteLength) {\n\tconst generatedBytes = new Uint8Array(byteLength);\n\n\tfor (let totalGeneratedBytes = 0; totalGeneratedBytes < byteLength; totalGeneratedBytes += maxEntropy) {\n\t\tgeneratedBytes.set(\n\t\t\tcrypto.getRandomValues(new Uint8Array(Math.min(maxEntropy, byteLength - totalGeneratedBytes))),\n\t\t\ttotalGeneratedBytes,\n\t\t);\n\t}\n\n\treturn generatedBytes;\n}\n\nfunction specialRandomBytes(byteLength, type, length) {\n\tconst generatedBytes = getRandomValues(byteLength);\n\tconst convert = type === 'hex' ? toHex : toBase64;\n\n\treturn convert(generatedBytes).slice(0, length);\n}\n\nexport default createStringGenerator(specialRandomBytes, getRandomValues);\nexport const cryptoRandomStringAsync = createAsyncStringGenerator(specialRandomBytes, getRandomValues);\n"],
  "mappings": "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",
  "names": ["generateForCustomCharacters", "specialRandomBytes"]
}
